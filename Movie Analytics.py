# -*- coding: utf-8 -*-
"""Homework3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UhJxgrT6CYRh593FwMMJ1rhxWLHw-inc
"""

#MOVIE ANALYTICS
#Movie analytics tool that allows the user to search for a movie of their choosing and obtain 
#further information about it using online data and text analytics. 

!pip install xmltodict

import xmltodict, matplotlib.pyplot as plt, requests, wordcloud,json,textblob,nltk
import skimage.io
nltk.download("all",quiet=True)
nltk.download("popular",quiet=True)
repeat=textblob.TextBlob("yes").correct()
print("Welcome to the movie analytics tool! ")
while repeat=='yes':
  question1 = (input("What movie would you like to analyze?")).lower()
  blob1 = textblob.TextBlob(question1)
  blob1_fix = blob1.correct()
  #print(blob1_fix)
  question2 = (input("What would you like to see (background/reception/poster/wordcloud/sentiment)?")).lower()
  blob2 = textblob.TextBlob(question2)
  blob2_fix = blob2.correct()
  #print(blob2_fix)
  base_url = "https://www.omdbapi.com/?r=xml&apikey=1fb4d62f&t="
  full_url=base_url+ question1
  response = requests.get(full_url)
  #print(full_url)
  if(blob2_fix=="background"):  
    if response:
      data = xmltodict.parse(response.text)   
      year = data["root"]["movie"]["@year"]
      rating = data["root"]["movie"]["@rated"]
      runtime = data["root"]["movie"]["@runtime"]
      genre = data["root"]["movie"]["@genre"]
      actors = data["root"]["movie"]["@actors"]
      plot = data["root"]["movie"]["@plot"]
      print("\nYear:",year)
      print("\nRating:",rating)
      print("\nRuntime:",runtime)
      print("\nGenre:",genre)
      print("\nActors:",actors)
      print("\nPlot:",plot)
    else:
        print("Sorry, connection error.")
  elif(blob2_fix=="reception"):
    if response:
      data = xmltodict.parse(response.text)
      awards = data["root"]["movie"]["@awards"]
      metascore = data["root"]["movie"]["@metascore"]
      imdbrating = data["root"]["movie"]["@imdbVotes"]
      print("Awards:",awards)
      print("Metascore:",metascore)
      print("IMDb rating:",imdbrating)
    else:
      print("Sorry, connection error.")     
  elif(blob2_fix=="poster"):
    if response:
      data = xmltodict.parse(response.text)
      poster = data["root"]["movie"]["@poster"]
      image = skimage.io.imread(poster) 
      plt.imshow(image, interpolation = "bilinear") 
      plt.axis("off") 
      plt.show()
    else:
      print("Sorry, connection error.")
  elif(blob2_fix=="wordcloud"):
    base_url = "https://dgoldberg.sdsu.edu/515/imdb/"
    full_url = base_url + question1.lower() + ".json"
    response = requests.get(full_url)
    if response:
      data = json.loads(response.text)
      text = ""
      for line in data:
        review = line["Review text"]
        text = text + review + " "
      additions = ["movie", "really", "one", "will","film"]
      wordcloud.STOPWORDS.update(additions)
      cloud = wordcloud.WordCloud(random_state = 0)
      cloud.generate(text)
      plt.imshow(cloud, interpolation = "bilinear")
      plt.axis("off")
      plt.show()
    else:
      print("Sorry, connection error.")
  elif(blob2_fix=="sentiment"):
    base_url = "https://dgoldberg.sdsu.edu/515/imdb/"
    full_url = base_url + question1.lower() + ".json"
    response = requests.get(full_url)
    if response:
      blob = textblob.TextBlob(response.text)
      print("Average IMDb review polarity:", blob.polarity)
      print("Average IMDb review subjectivity:", blob.subjectivity)
    else:
      print("Sorry, the tool could not successfully load any IMDb reviews for this movie. Please try another analysis or movie. ")
  else:
    print("Sorry, that analysis is not supported. Please try again.")

  repeat=textblob.TextBlob(input("Would you like to run another analysis (yes/no)?")).lower().correct()
  #print(repeat)